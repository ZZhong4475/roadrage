package tests;
import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;

import model.Direction;
import model.Light;
import model.Terrain;
import model.Truck;

public class TruckTest {
    private static final int TRIES_FOR_RANDOMNESS = 50;
    private static final int myDeathTime=30;
    private Truck myTestTruck;
    private Terrain myTestTerrain;
    private Light myTestLight;
    private static final int myX=10;
    private static final int myY=10;
    private static final Direction myDirection=Direction.EAST;
    
    @Before
    public void setUp() throws Exception {
       
        myTestTruck=new Truck(myX,myY,myDirection);
        
    }

    @Test
    public void testConstructor() {
        int theX=10;
        int theY=10;
        Truck newTruck = new Truck(theX,theY,Direction.EAST);
        assertEquals("X coordinates should equal",newTruck.getX(),myTestTruck.getY());
        assertEquals("Y coordinates should equal",newTruck.getY(),myTestTruck.getY());
        assertEquals("Direction should equal ",newTruck.getDirection(),myTestTruck.getDirection());
        assertEquals("DeathTime should equal ",newTruck.getDeathTime(),myTestTruck.getDeathTime());
        
        
        
    
        
        
    }
    
    @Test
    public void testSetter() {
        final int theSetX=19;
        final int theSetY=20;
        final Direction theSetD=Direction.SOUTH;
        myTestTruck.setX(theSetX);
        myTestTruck.setY(theSetY);
        myTestTruck.setDirection(theSetD);
        assertEquals(" set x should return same values",theSetX,myTestTruck.getX());
        assertEquals("set y should return same values",theSetY,myTestTruck.getY());
        assertEquals("set D should return same values",theSetD,myTestTruck.getDirection());
    }
    
    
    @Test
    public void testCanPassStreet() {

        assertTrue("Truck can pass red street light",myTestTruck.canPass(Terrain.STREET, Light.RED));
        assertTrue("Truck can pass green street light",myTestTruck.canPass(Terrain.STREET, Light.GREEN));
        assertTrue("Truck can pass yellow street light",myTestTruck.canPass(Terrain.STREET, Light.YELLOW));

    }
    @Test
    public void testCanPassTraffic() {

        assertTrue("Truck can pass red traffic light",myTestTruck.canPass(Terrain.LIGHT, Light.RED));
        assertTrue("Truck can pass green traffic light",myTestTruck.canPass(Terrain.LIGHT, Light.GREEN));
        assertTrue("Truck can pass yellow traffic light",myTestTruck.canPass(Terrain.LIGHT, Light.YELLOW));

    }

    @Test
    public void testCanPassCross() {

        assertFalse("Truck can pass red traffic light",myTestTruck.canPass(Terrain.CROSSWALK, Light.RED));
        assertTrue("Truck can pass green traffic light",myTestTruck.canPass(Terrain.CROSSWALK, Light.GREEN));
        assertTrue("Truck can pass yellow traffic light",myTestTruck.canPass(Terrain.CROSSWALK, Light.YELLOW));

    }
    @Test
    public void testChooseDirection() {

        final Map<Direction, Terrain> neighbors = new HashMap<Direction, Terrain>();
        neighbors.put(Direction.SOUTH, Terrain.CROSSWALK);
        neighbors.put(Direction.NORTH, Terrain.STREET);
        neighbors.put(Direction.EAST, Terrain.LIGHT);
        neighbors.put(Direction.WEST, Terrain.GRASS);
        
       
        boolean seenWest = false;
        boolean seenNorth = false;
        boolean seenEast = false;
        boolean seenSouth = false;
        
        
        for (int count = 0; count < TRIES_FOR_RANDOMNESS; count++) {
            final Direction d = myTestTruck.chooseDirection(neighbors);
            
            if (d == Direction.WEST) {
                seenWest = true;
            } else if (d == Direction.EAST) {
                seenNorth = true;
            } else if (d == Direction.NORTH) {
                seenEast = true;
            } else if (d == Direction.SOUTH) { 
                seenSouth = true;
            }
        }
 
        assertTrue("Truck chooseDirection() fails to select randomly "
                   + "among all possible valid choices!",
                   seenSouth && seenNorth && seenEast);
            
        assertFalse("Truck chooseDirection() reversed direction when not necessary!",
                    seenWest);
        
        //to test for reverse, pass empty neighbor(map);
        neighbors.clear();
        assertEquals(Direction.WEST, myTestTruck.chooseDirection(neighbors)); 
        
    }
}
